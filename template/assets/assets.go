// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 10, 8, 12, 24, 21, 155094000, time.UTC),
		},
		"/terraform": &vfsgen۰DirInfo{
			name:    "terraform",
			modTime: time.Date(2018, 10, 8, 12, 24, 21, 178088100, time.UTC),
		},
		"/terraform/basic": &vfsgen۰DirInfo{
			name:    "basic",
			modTime: time.Date(2018, 10, 9, 5, 43, 6, 914996400, time.UTC),
		},
		"/terraform/basic/NOTE.txt": &vfsgen۰CompressedFileInfo{
			name:             "NOTE.txt",
			modTime:          time.Date(2018, 10, 9, 5, 43, 6, 915991300, time.UTC),
			uncompressedSize: 282,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x06\xbf\xc3\xe6\x05\xec\xbb\x6f\x2d\xb4\xc9\xa9\x84\x52\xe8\x79\x2b\x4f\x1a\x11\x59\x5a\xb4\xab\x16\x57\xf8\xdd\x8b\x9d\xfe\xe4\xb6\xf3\xf1\xed\xc0\xd4\xda\x1d\xd9\x5d\xf8\x1d\x4f\x3c\x61\x59\x48\xae\x89\xb4\x38\x07\xd5\x53\x09\x61\xa6\x11\x12\xd2\x8c\x71\xd7\x36\x6d\x73\x0c\x60\x05\x65\x9c\x90\xc9\xce\xd8\x6e\x4d\x25\x3b\xe8\x40\xab\xf1\xfc\x13\x69\x9f\x53\x11\xa2\x81\x6a\xed\x7e\xe1\xc6\x5e\x30\x49\x60\xc3\xb2\xb4\xcd\xdd\x57\xc9\xa0\xc7\x12\x9d\xf9\x14\xf5\x6a\x6f\xf0\x8f\xdd\xea\x6d\xb3\x4f\x64\x89\xce\x66\xa2\x43\xdf\xd7\xda\x3d\xc4\x0f\x9f\x53\x9c\x10\xed\x9e\x75\x5b\xf2\xff\xc1\x22\x1d\xaf\x6d\x9f\x78\x53\x6f\xd0\x2e\xc2\x7a\x16\xdf\x1f\x10\x42\x7a\x4d\x39\x8c\x6b\xeb\x81\x45\x66\x52\xcb\xfe\x02\xdd\xb5\xcd\x77\x00\x00\x00\xff\xff\xf9\x9a\x69\xa1\x1a\x01\x00\x00"),
		},
		"/terraform/basic/manifest.yaml": &vfsgen۰CompressedFileInfo{
			name:             "manifest.yaml",
			modTime:          time.Date(2018, 10, 8, 12, 24, 21, 162088800, time.UTC),
			uncompressedSize: 341,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xb1\x6a\xc3\x30\x10\x86\x77\xc1\xbd\xc3\x41\xe6\x9a\x74\xf5\x56\x28\x1d\x43\x70\x32\x75\xbb\x38\xe7\xf4\x1a\xd9\x12\xa7\x8b\x21\x0d\x7a\xf7\x22\xb9\xc5\xd9\xf4\xeb\xd3\xff\x9d\xa4\x0d\x1e\x4c\xe5\xca\x09\x23\xf5\x57\xba\x30\x8e\x34\xc9\xc0\xc9\x70\x10\xcf\xe0\xc0\x4d\x34\x72\x8b\x8f\x47\xb3\x5f\x4e\xec\x68\xe4\x9c\xc1\x9d\x39\xf5\x2a\xd1\x24\x4c\x15\xbf\xaf\x39\x67\x04\x47\x37\xfb\x0a\x5a\xd1\x5b\x5d\x96\x52\xd4\xf0\xcd\xbd\xed\xe9\xf2\xe7\x5c\xf3\x13\xee\x38\x86\x67\x5c\x72\xc1\xe0\x36\xd8\xb1\x67\x4a\xf5\x66\x33\x6b\xaa\xd3\x5f\x9b\x6d\xb3\xad\xed\x59\xce\xac\xc7\x7b\xe4\x16\x8f\xac\x4a\x43\xd0\x11\x9c\x2e\x9d\x5d\xb0\x65\x6a\xb7\xe6\xa2\x9d\x25\xc9\x49\xbc\xd8\xbd\xc5\x78\x3b\x79\xe9\xc1\x25\x23\xb5\x43\x7d\x50\x8b\xf6\xaf\x6a\x6c\x00\xf7\x23\xf1\x43\x7c\xfd\x87\xd4\x82\x7b\x29\xc6\xcf\x75\x2f\xe7\xdf\x00\x00\x00\xff\xff\x39\x9c\xf0\xa1\x55\x01\x00\x00"),
		},
		"/terraform/basic/template.description": &vfsgen۰FileInfo{
			name:    "template.description",
			modTime: time.Date(2018, 10, 8, 12, 24, 21, 165089200, time.UTC),
			content: []byte("\x46\x75\x6e\x63\x74\x69\x6f\x6e\x20\x41\x70\x70\x20\x28\x56\x32\x29\x20\x61\x6e\x64\x20\x53\x74\x6f\x72\x61\x67\x65\x20\x41\x63\x63\x6f\x75\x6e\x74"),
		},
		"/terraform/basic/terraform.tf": &vfsgen۰CompressedFileInfo{
			name:             "terraform.tf",
			modTime:          time.Date(2018, 10, 8, 12, 24, 21, 168088900, time.UTC),
			uncompressedSize: 3325,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4b\x6f\xe3\x36\x10\xbe\x07\xc8\x7f\x20\x98\x3d\xb4\xc0\x46\x76\xfa\x38\x6c\x81\x1c\xbc\x59\x27\x35\xd2\x38\x86\xe5\x20\x58\x14\x0b\x81\x96\xc6\x32\xd7\x12\x49\x90\x94\x13\xc7\x70\x7f\x7b\x41\x91\x7a\x5a\x4a\x1a\x74\x75\x13\x67\xe6\x9b\x99\x6f\x1e\xe4\x19\xf2\x41\x6e\x69\x08\x68\x26\x29\x0b\xa9\x48\xe0\xf4\x64\x4b\x24\x25\xcb\x04\x10\x56\xd9\x52\x85\x92\x0a\x4d\x39\x0b\x68\x84\xd1\xfe\x50\x17\x87\x09\x05\xa6\xfb\x05\x0a\x42\x09\xba\x2d\xd4\xc0\x48\xcd\xea\xf4\xe4\x0c\xcd\x41\xf1\x4c\x86\x80\x6e\x24\xcf\x44\x5d\x59\x3a\x49\x10\x1b\x09\x46\xfb\xd3\x13\x84\x22\x58\x91\x2c\xd1\xe8\x12\xe1\xfd\xde\x9b\x91\x70\x43\x62\x98\x92\x14\x0e\x87\x73\x19\xe3\xd3\x93\x86\xbf\x84\x87\xc4\x24\x70\x6c\xfc\x9d\x08\xc2\x80\x28\xdd\x36\xd1\x24\x0e\x18\x49\xe1\x6d\x7f\xd6\xb2\x6e\x0b\x6c\x4b\x25\x67\xa9\x21\x60\x49\x14\xbc\x13\xc8\x90\x21\xb8\xa2\x9a\xcb\x1d\xf2\x41\x6b\xca\x62\xd5\xf4\x20\x4b\x05\xeb\x20\x93\xd4\xe1\x37\x3c\xac\xb5\x16\xea\x8f\xc1\x40\x69\x49\x37\xa0\x8c\x15\x7c\x02\xf8\xfe\xfb\xf3\xaf\xde\x32\xe1\x4b\x2f\xe4\x12\xbc\x27\xca\x22\xfe\xa4\x3c\x06\x7a\x50\x01\x0f\xaa\x70\x66\x24\x24\x9b\x18\x90\xea\x8c\x45\xd8\x1c\xea\x49\x9e\x21\x78\x26\x69\xde\x49\xe6\xa7\x1e\x11\x24\x09\x3f\x7f\xe2\x32\x89\x8e\x79\x2b\x90\xb6\x20\x55\x55\xad\x5e\xb0\x0b\x6f\xe8\x0d\x7b\x41\x5e\xa8\xc8\x43\x0a\x86\x25\x33\x0d\xa4\xae\xc0\xbc\x17\x2a\xaa\xb4\x7d\x01\x21\x5d\xed\x90\x5e\x03\x4a\x08\x8b\x33\x12\x03\xe2\xab\xfc\xdf\x79\x69\x34\x99\x53\xe9\x2a\x44\xc4\x35\x03\x5d\x40\x0b\xc9\xb7\x34\x02\x89\x30\x79\xc9\x24\xc8\xb4\x30\x29\xa7\xc9\xd8\x7c\xd8\x6f\x89\xf4\xca\x23\xd3\x1e\x95\x8a\x9d\xab\x23\x35\x7b\xec\x54\x5b\xa3\x5b\x29\xb7\x04\x4e\xbd\x1c\xca\x4a\xb1\x3c\x2a\x7b\xb3\x18\xc6\x32\xf4\xa0\x3d\x9e\x58\x83\xd2\x2e\x21\xc3\xbf\x61\xa2\x42\x6c\x6a\x5b\xcf\xc5\x74\x56\x5a\xc5\x89\x95\x6b\x12\xab\x82\xd3\x1c\xb1\x8a\xcf\x0d\xa9\xd5\x3b\x1c\xc5\x28\x09\x8b\x78\x1a\x98\xf6\x67\x31\x36\xcb\x6c\xb5\xa2\xcf\x2e\xb8\x04\x58\xac\xd7\xe8\x12\xfd\x66\xfe\x94\x29\x36\x49\xd0\x25\x5a\x91\x44\xe5\x1d\x92\x09\x01\xb2\x3a\xe8\xc9\x5f\x69\x2e\x4d\xbf\x91\x30\xe4\x19\xd3\x3d\x04\xb4\xbf\x3c\x05\x09\x22\x21\x21\xfc\x64\x52\xe9\xdc\x19\x1f\xf1\x39\xfe\x88\xf1\xcf\x07\x45\x3e\xec\x1b\xc9\x78\x36\x15\xc3\x67\x96\xb8\x82\x37\xb9\x0d\x2a\xdf\xb9\xb3\xee\x7a\x79\x26\x58\xaf\xe2\xb0\xac\x45\x67\xc0\xaf\x61\x34\x6b\xe6\xd8\x08\x34\x05\xd9\xc6\xf1\x35\x61\x11\x91\x51\x43\xd1\x70\x41\x2d\x42\xa0\x77\x22\x2f\xf2\x5f\x73\x1f\xdb\x9d\x29\x80\x45\x2a\xc8\x5b\xe4\x6f\xdc\x45\x04\xfe\xd6\x5b\x20\x22\x44\xa0\xec\x15\x17\x88\x84\xb0\xb7\x2b\x54\xf6\x57\x67\x51\x0e\x39\x48\x1f\x59\xef\xe4\xa9\xab\x66\xef\x28\xd7\x86\xb2\xa8\x23\xfa\xeb\x8c\x85\xc6\xc7\x48\x98\x75\x96\xb7\xf7\x26\x2b\x46\x28\x2f\xc9\x25\xc2\x5f\x76\x8c\xa4\x34\xb4\xc3\x8f\x14\x7d\xc9\x3d\x7f\xbd\xe8\x99\xa5\x1a\x9d\x65\xa1\x28\x53\x34\x5e\x6b\xf5\xbf\x29\x25\xf4\x35\x42\xcd\xfd\x9c\xa9\x1f\xc1\x57\x3d\xf8\xbc\xcb\xac\x83\x47\x58\x56\x6b\xff\x8a\xab\x94\xab\x2f\x9f\x3b\x57\x09\x65\x1a\x62\x90\x18\xe1\xda\x8d\x9b\x52\xd3\x98\x17\xc3\xe1\x70\xe8\x0e\xc8\x33\xba\x44\x9f\xcc\xd7\xcb\xe3\xca\xd5\xc8\x10\xfa\x1f\x97\xc6\x9b\x2c\xe6\xe5\x7e\x65\x88\x7f\x44\x77\xbe\x7b\xa5\xb4\xe7\xcf\xdc\x30\x1d\x20\x6d\x35\x0b\x53\xdc\x4e\xc5\x96\x0d\x39\x63\x60\x79\xb3\xf3\xdf\x04\x69\x2d\x63\x8b\x21\x24\x4d\x89\xdc\x1d\xdb\x5a\x68\xf7\xda\x30\x40\xff\xfc\xe2\xc6\xc5\x06\x63\x5f\x3b\x45\x95\xf1\x68\x36\x9b\x4c\xfd\xc9\xcd\x9f\x0b\x3f\x98\x4c\xfd\xc5\xfc\xe1\x6e\x3c\x5d\x8c\x16\x93\xfb\xe9\xed\xf8\x2b\x3e\x4a\xe7\x68\x4c\x5c\x4a\x4c\x69\x99\x99\xd2\x59\xe9\x06\x76\xee\x06\x46\xf8\xfa\x61\x7a\x65\xf0\xfc\xe0\xf1\x7e\x7e\x3b\x9e\x07\xf3\x87\xe9\x62\x72\x37\xc6\xb5\xbb\xd1\x3d\x33\x0a\x9b\x33\xb4\x58\x53\x85\x62\x6e\xc8\xd0\x1c\x85\x6b\xc2\x62\x40\x94\x69\x8e\x1e\xc7\x9f\xfd\xc9\x62\x6c\x50\x82\xeb\xf9\xfd\x5d\x30\x1b\x5d\xdd\x8e\x6e\xc6\xce\x5b\x9f\x18\xd7\xef\xeb\xa3\x87\xe6\xc1\x4a\xea\xcf\xbe\xc3\xa0\x79\xe6\x28\x3d\x0c\xdc\x41\x4b\x5c\x3d\xcd\xca\x8b\xbb\x63\xcd\xbf\xda\x18\xf8\x63\xdf\x0b\xe4\x48\xdc\xd5\x13\xf8\x1b\xca\x07\xf3\xdf\x00\x00\x00\xff\xff\x50\x0a\x5b\x42\xfd\x0c\x00\x00"),
		},
		"/terraform/basic/values.hcl": &vfsgen۰CompressedFileInfo{
			name:             "values.hcl",
			modTime:          time.Date(2018, 10, 8, 12, 24, 21, 170092900, time.UTC),
			uncompressedSize: 484,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xd1\x4a\xc3\x40\x10\x45\xdf\x0b\xf9\x87\x61\x5f\xb5\xd9\x07\xf1\x41\xc1\x5f\x10\xff\x20\x4c\x92\xeb\x76\xdb\x64\x27\xcc\x4e\x5a\x4b\xc8\xbf\x8b\x55\x29\x21\x05\xf1\x7d\xee\x3d\xe7\xce\x91\x35\x72\xdd\x81\x1c\xd2\x31\xaa\xa4\x1e\xc9\xaa\x9a\x33\xaa\xc4\x3d\x1c\x4d\xc5\x86\xa8\xc5\x3b\x8f\x9d\xd1\x0b\xb9\x69\x2a\xdf\xb8\x39\x70\xc0\x2b\xf7\x98\x67\x57\x6c\xe6\x62\x73\xad\x51\x64\x19\xb5\x41\x15\x54\xc6\xe1\xef\xfc\x56\x83\x23\xef\xa9\x3e\xff\x5e\xdd\xd3\xb2\x83\x62\x26\xdb\x81\x6e\x0a\xd2\x1d\x6d\x35\x5c\x1c\x96\x16\x83\xe4\x68\xa2\xe7\xef\xd3\x51\xe3\x8f\xca\x42\x66\x67\x36\xe4\x67\xef\xb3\x69\x3c\x20\x7f\xa5\xf0\x04\xec\x1f\x3f\x1e\xca\xba\x93\xba\x6c\x44\x51\x9e\x62\x6a\xe5\x94\xcb\x04\xf3\xd7\x62\xef\x56\xd4\x4e\x1a\xb6\x28\x69\xbd\x7a\xcf\x03\x27\x70\xb6\x75\xc8\x38\xfc\xeb\xd5\x0b\x20\xa7\x30\x72\xc0\xad\x6d\xad\x58\xc2\x85\xf7\x19\x00\x00\xff\xff\xb9\x6c\x43\x36\xe4\x01\x00\x00"),
		},
		"/terraform/cosmos": &vfsgen۰DirInfo{
			name:    "cosmos",
			modTime: time.Date(2018, 10, 10, 22, 11, 19, 837811000, time.UTC),
		},
		"/terraform/cosmos/NOTE.txt": &vfsgen۰CompressedFileInfo{
			name:             "NOTE.txt",
			modTime:          time.Date(2018, 10, 10, 22, 11, 19, 817809200, time.UTC),
			uncompressedSize: 282,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x06\xbf\xc3\xe6\x05\xec\xbb\x6f\x2d\xb4\xc9\xa9\x84\x52\xe8\x79\x2b\x4f\x1a\x11\x59\x5a\xb4\xab\x16\x57\xf8\xdd\x8b\x9d\xfe\xe4\xb6\xf3\xf1\xed\xc0\xd4\xda\x1d\xd9\x5d\xf8\x1d\x4f\x3c\x61\x59\x48\xae\x89\xb4\x38\x07\xd5\x53\x09\x61\xa6\x11\x12\xd2\x8c\x71\xd7\x36\x6d\x73\x0c\x60\x05\x65\x9c\x90\xc9\xce\xd8\x6e\x4d\x25\x3b\xe8\x40\xab\xf1\xfc\x13\x69\x9f\x53\x11\xa2\x81\x6a\xed\x7e\xe1\xc6\x5e\x30\x49\x60\xc3\xb2\xb4\xcd\xdd\x57\xc9\xa0\xc7\x12\x9d\xf9\x14\xf5\x6a\x6f\xf0\x8f\xdd\xea\x6d\xb3\x4f\x64\x89\xce\x66\xa2\x43\xdf\xd7\xda\x3d\xc4\x0f\x9f\x53\x9c\x10\xed\x9e\x75\x5b\xf2\xff\xc1\x22\x1d\xaf\x6d\x9f\x78\x53\x6f\xd0\x2e\xc2\x7a\x16\xdf\x1f\x10\x42\x7a\x4d\x39\x8c\x6b\xeb\x81\x45\x66\x52\xcb\xfe\x02\xdd\xb5\xcd\x77\x00\x00\x00\xff\xff\xf9\x9a\x69\xa1\x1a\x01\x00\x00"),
		},
		"/terraform/cosmos/manifest.yaml": &vfsgen۰CompressedFileInfo{
			name:             "manifest.yaml",
			modTime:          time.Date(2018, 10, 10, 22, 11, 19, 819812400, time.UTC),
			uncompressedSize: 341,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xb1\x6a\xc3\x30\x10\x86\x77\xc1\xbd\xc3\x41\xe6\x9a\x74\xf5\x56\x28\x1d\x43\x70\x32\x75\xbb\x38\xe7\xf4\x1a\xd9\x12\xa7\x8b\x21\x0d\x7a\xf7\x22\xb9\xc5\xd9\xf4\xeb\xd3\xff\x9d\xa4\x0d\x1e\x4c\xe5\xca\x09\x23\xf5\x57\xba\x30\x8e\x34\xc9\xc0\xc9\x70\x10\xcf\xe0\xc0\x4d\x34\x72\x8b\x8f\x47\xb3\x5f\x4e\xec\x68\xe4\x9c\xc1\x9d\x39\xf5\x2a\xd1\x24\x4c\x15\xbf\xaf\x39\x67\x04\x47\x37\xfb\x0a\x5a\xd1\x5b\x5d\x96\x52\xd4\xf0\xcd\xbd\xed\xe9\xf2\xe7\x5c\xf3\x13\xee\x38\x86\x67\x5c\x72\xc1\xe0\x36\xd8\xb1\x67\x4a\xf5\x66\x33\x6b\xaa\xd3\x5f\x9b\x6d\xb3\xad\xed\x59\xce\xac\xc7\x7b\xe4\x16\x8f\xac\x4a\x43\xd0\x11\x9c\x2e\x9d\x5d\xb0\x65\x6a\xb7\xe6\xa2\x9d\x25\xc9\x49\xbc\xd8\xbd\xc5\x78\x3b\x79\xe9\xc1\x25\x23\xb5\x43\x7d\x50\x8b\xf6\xaf\x6a\x6c\x00\xf7\x23\xf1\x43\x7c\xfd\x87\xd4\x82\x7b\x29\xc6\xcf\x75\x2f\xe7\xdf\x00\x00\x00\xff\xff\x39\x9c\xf0\xa1\x55\x01\x00\x00"),
		},
		"/terraform/cosmos/template.description": &vfsgen۰FileInfo{
			name:    "template.description",
			modTime: time.Date(2018, 10, 8, 12, 24, 21, 173087300, time.UTC),
			content: []byte("\x46\x75\x6e\x63\x74\x69\x6f\x6e\x20\x41\x70\x70\x20\x28\x56\x32\x29\x2c\x20\x53\x74\x6f\x72\x61\x67\x65\x20\x41\x63\x63\x6f\x75\x6e\x74\x2c\x20\x61\x6e\x64\x20\x43\x6f\x73\x6d\x6f\x73\x44\x42"),
		},
		"/terraform/cosmos/terraform.tf": &vfsgen۰CompressedFileInfo{
			name:             "terraform.tf",
			modTime:          time.Date(2018, 10, 13, 11, 9, 33, 445033000, time.UTC),
			uncompressedSize: 4108,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x6f\xdb\x38\x13\xbe\x07\xc8\x7f\x20\xd8\x1e\xde\x17\x68\x14\xb7\xbb\x7b\xe8\x16\x3e\xe4\xc3\xcd\x06\xd9\xba\x81\x9d\xa2\x28\x16\x05\x41\x53\x63\x85\x0d\x45\x12\x24\xe5\xc6\x31\xbc\xbf\x7d\x41\x91\xfa\xb2\xa5\xa4\x41\xeb\x9b\x39\xdf\xcf\x3c\x33\xa4\x5e\xa0\x39\x98\x15\x67\x80\xae\x0d\x97\x8c\x6b\x01\x87\x07\x2b\x6a\x38\x5d\x08\x40\xd8\x16\x0b\xcb\x0c\xd7\x8e\x2b\x49\x78\x8a\xd1\x66\xdb\x16\x33\xc1\x41\xba\x61\x81\x05\x66\xc0\xed\x0a\x1d\x48\xda\xb2\x3a\x3c\x78\x81\x66\x60\x55\x61\x18\xa0\x0b\xa3\x0a\xdd\x56\x36\x51\x42\x32\x2f\xc1\x68\x73\x78\x80\x50\x0a\x4b\x5a\x08\x87\xc6\x08\x6f\x36\xc9\x35\x65\x77\x34\x83\x29\xcd\x61\xbb\x3d\x32\x19\x3e\x3c\xe8\xc4\x13\x8a\x51\x5f\xc0\xbe\xf1\x37\xaa\xa9\x04\x6a\xdd\xae\x89\xa3\x19\x91\x34\x87\xa7\xe3\x05\xcb\xb6\x2d\xc8\x15\x37\x4a\xe6\x1e\x80\x05\xb5\xf0\x4c\x47\x1e\x0c\xad\x2c\x77\xca\xac\xd1\x1c\x9c\xe3\x32\xb3\xdd\x08\xa6\x56\x08\x01\x0a\xc3\xa3\xff\x4e\x84\x5b\xe7\xb4\xfd\xf3\xf8\xd8\x3a\xc3\xef\xc0\x7a\x2b\x78\x0b\xf0\xed\x8f\xfb\xdf\x92\x85\x50\x8b\x84\x29\x03\xc9\x77\x2e\x53\xf5\xdd\x26\x12\xdc\x71\xe3\xf8\xb8\x49\xe7\x9a\x32\x7a\x97\x01\xb2\xbd\xb9\xe8\x50\x43\xbb\xc8\x17\x08\xee\x69\x5e\x32\xc9\xff\x69\x67\x04\x42\xa8\xa3\xef\xca\x88\x74\x1f\xb7\xca\xd3\x0a\x8c\x6d\xba\x35\xe8\xec\x75\x32\x4a\x46\x83\x4e\x1e\xb8\x2e\x53\x22\xa3\x1a\x99\x8e\xa7\xbe\xc4\x92\x07\xae\x9b\xb2\xe7\x1a\x18\x5f\xae\x91\xbb\x05\x24\xa8\xcc\x0a\x9a\x01\x52\xcb\xf2\x7f\x8c\xd2\x21\x59\x54\xe9\x6b\x44\xaa\x9c\x04\x57\xb9\xd6\x46\xad\x78\x0a\x06\x61\xfa\x50\x18\x30\x79\x65\x52\x4f\x93\xb7\x79\xb9\x59\x51\x93\xd4\x47\x9e\x1e\x8d\x4a\x98\xab\x3d\xb5\x70\x1c\x55\x77\x46\xb7\x51\xde\x11\x44\xf5\x7a\x28\x1b\xc5\xfa\xa8\xe6\x66\x35\x8c\x75\xea\x64\x77\x3c\xb1\x03\xeb\x62\x41\x1e\x7f\x8f\x44\xe3\xb1\xab\x1d\x22\x57\xd3\xd9\x68\x55\x27\x41\xee\x68\x66\x2b\x4c\x4b\x8f\x4d\x7e\x71\x48\x83\xde\x76\x2f\x47\x43\x65\xaa\x72\xe2\xe9\x2f\x33\xec\x97\xd9\x72\xc9\xef\x63\x72\x02\x64\xe6\x6e\xd1\x18\xfd\xee\xff\x59\xdf\x6c\x2a\xd0\x18\x2d\xa9\xb0\x25\x43\x0a\xad\xc1\x34\x07\x03\xf5\x5b\xa7\x8c\xe7\x1b\x65\x4c\x15\xd2\x0d\x00\xb0\xfb\x2b\x4b\x30\xa0\x05\x65\xf0\x3f\x5f\x4a\xef\xce\x78\x85\x8f\xf0\x2b\x8c\xff\xbf\xb5\xf4\xe5\xa6\x53\x4c\x12\x4a\xf1\x78\x16\x22\x36\xbc\x8b\x2d\x69\x62\x97\xc1\xfa\xfb\x95\xf8\x64\x93\x06\xc3\xba\x17\xbd\x09\x3f\xe6\xa3\xdb\xb3\x88\x06\x71\x1c\xcc\xae\x9f\xb9\xa3\x32\xa5\x26\xed\x28\x7a\x2c\x78\xf0\x40\xdc\x5a\x97\x4d\xfe\x7b\x36\xc7\x61\x67\x6a\x90\xa9\x25\x25\x45\xfe\xc1\x7d\x40\xe0\xaf\x83\x0d\xa2\x5a\x13\x1b\xae\x38\xa2\x05\x95\x4f\x77\xa8\xe6\x57\x6f\x53\xb6\xa5\x93\x21\xb0\x9e\x89\x53\x5f\xcf\x9e\xd1\xae\x3b\x2e\xd3\x9e\xec\xdf\x17\x92\xf9\x18\x27\xda\xaf\xb3\x92\xde\x77\x45\x35\x42\x65\x4b\xc6\x08\x9f\xaf\x25\xcd\x39\x0b\xc3\x8f\x2c\x7f\x28\x23\x7f\x79\x3d\x30\x4b\x2d\x38\xeb\x46\x71\x69\x79\x76\xeb\xec\x4f\x43\x4a\xf9\x63\x80\xfa\xfb\xb9\xb0\xbf\x02\xaf\x76\xf2\x25\xcb\x42\x80\xcf\xb0\x68\xd6\xfe\x99\xb2\xb9\xb2\xe7\xa7\xbd\xab\x84\x4b\x07\x19\x18\x8c\x70\xeb\xc6\xcd\xb9\x27\xe6\xeb\xd1\x68\x34\x8a\x07\xf4\x1e\x8d\xd1\x5b\xff\x1b\xc4\x91\x95\x61\xd2\x45\x6b\x71\xa4\x0b\xdc\xd9\x73\xcf\xc3\xf0\x28\x5d\x1c\xd5\x5b\x22\xe6\x99\x18\xde\x59\x11\xbf\x84\xb3\x3f\xdd\x05\x84\xd4\x72\x09\xa6\xee\x40\xff\x66\x18\x64\xf7\x85\x50\x0b\x2a\xce\x15\x2b\x3c\x02\xe7\xa7\x91\xe2\x08\x81\xf4\x37\x31\xa1\x85\x53\x39\x75\x9c\x91\x25\xe5\x42\xad\x4a\xba\x3b\x53\x40\xa5\xc7\x94\xb4\xdc\x3a\x90\x6c\x4d\xb4\x12\x9c\xad\x2b\xd8\x77\xa5\x02\x56\x20\x9a\xc8\xa7\xaa\x90\x29\xa4\x73\x47\x05\x48\xb0\x16\x37\x56\x39\xbd\x2f\x41\x37\x2b\x2a\x08\x97\xfe\x26\x56\x32\xb5\x25\x2f\xba\x5a\xb6\xb2\x26\xda\xc0\x92\xdf\x07\xdf\x6f\x2a\xee\x6c\xab\x2c\x33\x50\xa4\xee\x56\x2b\xbf\xfd\x0e\x3e\xbb\x7f\xfe\x57\x61\x43\xb4\xe1\xca\x70\xb7\x46\x63\xd4\xa4\x30\x40\xda\x65\x5c\x2c\x7e\x0b\xfc\xe0\x4d\xf7\xe4\xe8\x97\x3b\xea\x91\x9b\xe7\x57\xac\xd4\x1f\x74\xd4\x59\x14\x9d\x4b\xc3\x3f\x8b\x7a\x9c\xec\xaa\x05\x37\xd5\x93\xaa\x7a\x1a\x30\x25\x25\x04\xdc\xc2\xa5\xd5\x75\xb2\xf3\x82\x08\x3e\xb4\xe1\x39\x35\xeb\x7d\xdb\xe0\x3a\x3e\x91\xbd\xa3\x7f\xdf\xc4\x01\x08\xc9\x84\x27\x7a\x45\x18\x7c\x72\x7d\x7d\x39\x9d\x5f\x5e\xfc\x75\x33\x27\x97\xd3\xf9\xcd\xec\xd3\x87\xc9\xf4\xe6\xe4\xe6\xf2\xe3\xf4\x6a\xf2\x05\xef\x95\xb3\xb7\xdb\x63\x49\xd2\x3a\x53\xce\x5b\x90\xde\xc1\xba\x22\x13\x7e\xff\x69\x7a\xe6\xfd\xcd\xc9\xe7\x8f\xb3\xab\xc9\x8c\xcc\x3e\x4d\x6f\x2e\x3f\x4c\x70\xeb\x41\x17\xdf\xc6\xb5\xcd\xe7\xc9\xe9\xfc\xf2\x66\xe2\x55\xc9\xfb\xd9\xc7\x0f\xe4\xfa\xe4\xec\xea\xe4\xa2\x6d\xd3\xf3\x8d\xb3\x0d\x92\xf6\x17\xc7\xf6\xb8\x7b\x16\x81\xd9\x1e\xc7\x83\x1d\x71\xf3\x55\x50\xa7\xc2\xe2\xbe\x3f\xab\x91\x2e\x93\x38\x09\xdd\x98\xc8\x54\x2b\x2e\xdd\xb8\x41\x69\x77\x73\x27\xe9\x22\x81\xa8\xb6\x7d\x17\xed\xae\x60\xfd\x84\x49\xd5\xe1\x9c\x5a\x07\xa6\x44\xf4\x5d\x75\xf7\xf6\xbc\x7a\x1e\xa5\x1c\x7e\x35\xf4\x20\xdf\x13\xf7\xb1\x0d\x7f\x45\xe5\xc8\xff\x17\x00\x00\xff\xff\xd0\x52\xb0\x9a\x0c\x10\x00\x00"),
		},
		"/terraform/cosmos/values.hcl": &vfsgen۰CompressedFileInfo{
			name:             "values.hcl",
			modTime:          time.Date(2018, 10, 10, 22, 11, 19, 838811400, time.UTC),
			uncompressedSize: 484,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xd1\x4a\xc3\x40\x10\x45\xdf\x0b\xf9\x87\x61\x5f\xb5\xd9\x07\xf1\x41\xc1\x5f\x10\xff\x20\x4c\x92\xeb\x76\xdb\x64\x27\xcc\x4e\x5a\x4b\xc8\xbf\x8b\x55\x29\x21\x05\xf1\x7d\xee\x3d\xe7\xce\x91\x35\x72\xdd\x81\x1c\xd2\x31\xaa\xa4\x1e\xc9\xaa\x9a\x33\xaa\xc4\x3d\x1c\x4d\xc5\x86\xa8\xc5\x3b\x8f\x9d\xd1\x0b\xb9\x69\x2a\xdf\xb8\x39\x70\xc0\x2b\xf7\x98\x67\x57\x6c\xe6\x62\x73\xad\x51\x64\x19\xb5\x41\x15\x54\xc6\xe1\xef\xfc\x56\x83\x23\xef\xa9\x3e\xff\x5e\xdd\xd3\xb2\x83\x62\x26\xdb\x81\x6e\x0a\xd2\x1d\x6d\x35\x5c\x1c\x96\x16\x83\xe4\x68\xa2\xe7\xef\xd3\x51\xe3\x8f\xca\x42\x66\x67\x36\xe4\x67\xef\xb3\x69\x3c\x20\x7f\xa5\xf0\x04\xec\x1f\x3f\x1e\xca\xba\x93\xba\x6c\x44\x51\x9e\x62\x6a\xe5\x94\xcb\x04\xf3\xd7\x62\xef\x56\xd4\x4e\x1a\xb6\x28\x69\xbd\x7a\xcf\x03\x27\x70\xb6\x75\xc8\x38\xfc\xeb\xd5\x0b\x20\xa7\x30\x72\xc0\xad\x6d\xad\x58\xc2\x85\xf7\x19\x00\x00\xff\xff\xb9\x6c\x43\x36\xe4\x01\x00\x00"),
		},
		"/terraform/cosmosSearch": &vfsgen۰DirInfo{
			name:    "cosmosSearch",
			modTime: time.Date(2018, 10, 8, 12, 24, 21, 176088900, time.UTC),
		},
		"/terraform/cosmosSearch/template.description": &vfsgen۰FileInfo{
			name:    "template.description",
			modTime: time.Date(2018, 10, 8, 12, 24, 21, 177087700, time.UTC),
			content: []byte("\x46\x75\x6e\x63\x74\x69\x6f\x6e\x20\x41\x70\x70\x20\x28\x56\x32\x29\x2c\x20\x53\x74\x6f\x72\x61\x67\x65\x20\x41\x63\x63\x6f\x75\x6e\x74\x2c\x20\x43\x6f\x73\x6d\x6f\x73\x44\x42\x2c\x20\x41\x7a\x75\x72\x65\x20\x53\x65\x61\x72\x63\x68"),
		},
		"/terraform/servicebus": &vfsgen۰DirInfo{
			name:    "servicebus",
			modTime: time.Date(2018, 10, 8, 12, 24, 21, 179090000, time.UTC),
		},
		"/terraform/servicebus/template.description": &vfsgen۰FileInfo{
			name:    "template.description",
			modTime: time.Date(2018, 10, 8, 12, 24, 21, 180160500, time.UTC),
			content: []byte("\x46\x75\x6e\x63\x74\x69\x6f\x6e\x20\x41\x70\x70\x20\x28\x56\x32\x29\x2c\x20\x53\x74\x6f\x72\x61\x67\x65\x20\x41\x63\x63\x6f\x75\x6e\x74\x2c\x20\x61\x6e\x64\x20\x53\x65\x72\x76\x69\x63\x65\x20\x42\x75\x73"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/terraform"].(os.FileInfo),
	}
	fs["/terraform"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/terraform/basic"].(os.FileInfo),
		fs["/terraform/cosmos"].(os.FileInfo),
		fs["/terraform/cosmosSearch"].(os.FileInfo),
		fs["/terraform/servicebus"].(os.FileInfo),
	}
	fs["/terraform/basic"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/terraform/basic/NOTE.txt"].(os.FileInfo),
		fs["/terraform/basic/manifest.yaml"].(os.FileInfo),
		fs["/terraform/basic/template.description"].(os.FileInfo),
		fs["/terraform/basic/terraform.tf"].(os.FileInfo),
		fs["/terraform/basic/values.hcl"].(os.FileInfo),
	}
	fs["/terraform/cosmos"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/terraform/cosmos/NOTE.txt"].(os.FileInfo),
		fs["/terraform/cosmos/manifest.yaml"].(os.FileInfo),
		fs["/terraform/cosmos/template.description"].(os.FileInfo),
		fs["/terraform/cosmos/terraform.tf"].(os.FileInfo),
		fs["/terraform/cosmos/values.hcl"].(os.FileInfo),
	}
	fs["/terraform/cosmosSearch"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/terraform/cosmosSearch/template.description"].(os.FileInfo),
	}
	fs["/terraform/servicebus"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/terraform/servicebus/template.description"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
